import React, { useState } from "react";
import { AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Input } from "@/components/ui/input";
import { SectionHeader, sectionTriggerStyle, sectionContentStyle, sectionContentWrapperStyle } from "./SectionStyles";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { SectionProps } from "./types";
import { sendToValcre } from "@/utils/webhooks";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";
import { RefreshCw } from "lucide-react";
const PropertyInfoSection: React.FC<SectionProps> = ({
  job,
  jobDetails = {},
  onUpdateDetails
}) => {
  const [isSyncing, setIsSyncing] = useState(false);
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!onUpdateDetails) return;
    const {
      name,
      value,
      type
    } = e.target;
    let processedValue: string | number = value;

    // Convert numeric values
    if (type === 'number' && value !== '') {
      processedValue = parseFloat(value);
    }
    onUpdateDetails({
      [name]: processedValue
    });
  };

  // Fill test data for Section 3B
  const fillTestData = () => {
    if (!onUpdateDetails) return;
    
    const testData = {
      // Property Site
      zoningClassification: 'Commercial Mixed-Use',
      zoneAbbreviation: 'C-2',
      landUseDesignation: 'Mixed Residential/Commercial',
      floodZone: 'Zone X',
      utilities: 'All public utilities available',
      // Parcels Summary
      parcelNumber: '123-456-789',
      usableLandSf: 15000,
      grossLandSf: 18500,
      usableLandAcres: 0.34,
      grossLandAcres: 0.42,
      // Assessments & Taxes
      assessmentYear: '2024',
      landAssessmentValue: 250000,
      improvedAssessmentValue: 600000,
      totalAssessmentValue: 850000,
      assessedValue: 850000,
      taxes: 12500
    };
    
    onUpdateDetails(testData);
    toast.success('Test data populated for Section 3B!');
  };

  const handleSyncToValcre = async () => {
    if (!job || !jobDetails?.valcreJobId) return;
    
    setIsSyncing(true);
    
    try {
      // Prepare property research data for Valcre
      const propertyData = {
        jobId: jobDetails.valcreJobId,
        jobNumber: jobDetails.jobNumber,
        updateType: 'property_research',
        // Property Site data
        zoningClassification: jobDetails.zoningClassification || '',
        zoneAbbreviation: jobDetails.zoneAbbreviation || '',
        landUseDesignation: jobDetails.landUseDesignation || '',
        floodZone: jobDetails.floodZone || '',
        utilities: jobDetails.utilities || '',
        // Parcels Summary
        parcelNumber: jobDetails.parcelNumber || '',
        usableLandSf: jobDetails.usableLandSf || 0,
        grossLandSf: jobDetails.grossLandSf || 0,
        usableLandAcres: jobDetails.usableLandAcres || 0,
        grossLandAcres: jobDetails.grossLandAcres || 0,
        // Assessments & Taxes
        assessmentYear: jobDetails.assessmentYear || '',
        landAssessmentValue: jobDetails.landAssessmentValue || 0,
        improvedAssessmentValue: jobDetails.improvedAssessmentValue || 0,
        totalAssessmentValue: jobDetails.totalAssessmentValue || 0,
        assessedValue: jobDetails.assessedValue || 0,
        taxes: jobDetails.taxes || 0,
        timestamp: new Date().toISOString(),
      };
      
      console.log('Syncing property research to Valcre:', propertyData);
      const result = await sendToValcre(propertyData);
      
      if (result.success) {
        toast.success(
          <div>
            <div>âœ… Property data synced to Valcre!</div>
            <div className="text-xs mt-1">Job: {jobDetails.jobNumber}</div>
          </div>
        );
        
        // Update sync timestamp
        await supabase
          .from('job_loe_details')
          .update({
            last_property_sync_at: new Date().toISOString()
          })
          .eq('job_submission_id', job.id);
          
      } else {
        toast.error(result.error || 'Failed to sync property data');
      }
    } catch (error: any) {
      console.error('Error syncing to Valcre:', error);
      toast.error('Failed to sync property data to Valcre');
    } finally {
      setIsSyncing(false);
    }
  };
  return <AccordionItem value="section-4">
      <AccordionTrigger className={sectionTriggerStyle}>
        <SectionHeader number="3b" title="Section 3b: Pulling Property Info - Research" />
      </AccordionTrigger>
      <AccordionContent className={sectionContentStyle}>
        <div className={sectionContentWrapperStyle}>
        {/* Action Buttons Row - Compact */}
        <div className="mb-4 flex justify-end gap-2">
          {/* Sync Button - Only show when job exists */}
          {jobDetails?.jobNumber && jobDetails.jobNumber.toString().startsWith('CAL') && (
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={handleSyncToValcre}
              disabled={isSyncing}
              className="border-blue-600 text-blue-700 hover:bg-blue-50"
            >
              {isSyncing ? (
                <>
                  <RefreshCw className="h-4 w-4 mr-1 animate-spin" />
                  Syncing...
                </>
              ) : (
                <>
                  <RefreshCw className="h-4 w-4 mr-1" />
                  Sync to Valcre
                </>
              )}
            </Button>
          )}
          
          {/* Test Data Button */}
          <button
            type="button"
            onClick={fillTestData}
            className="text-xs text-gray-500 hover:text-gray-700 flex items-center gap-1 transition-colors"
            title="Fill test data for development"
          >
            <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
            </svg>
            <span>Test Data</span>
          </button>
        </div>
        
        <div className="space-y-8">
          {/* Property Site Section */}
          <div>
            <h4 className="text-lg font-medium mb-4 border-b pb-2 text-slate-700 dark:text-slate-300">Property Site</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div className="grid grid-cols-1 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="zoningClassification">Zoning Classification</Label>
                    <Input id="zoningClassification" name="zoningClassification" value={jobDetails.zoningClassification || ''} onChange={handleChange} placeholder="e.g., Commercial Mixed-Use" className="placeholder:text-gray-500" />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="zoneAbbreviation">Zone Abbreviation</Label>
                    <Input id="zoneAbbreviation" name="zoneAbbreviation" value={jobDetails.zoneAbbreviation || ''} onChange={handleChange} placeholder="e.g., C-2" className="placeholder:text-gray-500" />
                  </div>
                </div>
              </div>

              <div className="space-y-4">
                <div className="grid grid-cols-1 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="landUseDesignation">Land Use Designation</Label>
                    <Input id="landUseDesignation" name="landUseDesignation" value={jobDetails.landUseDesignation || ''} onChange={handleChange} placeholder="e.g., Mixed Residential/Commercial" className="placeholder:text-gray-500" />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="floodZone">Flood Zone</Label>
                    <Input id="floodZone" name="floodZone" value={jobDetails.floodZone || ''} onChange={handleChange} placeholder="e.g., Zone X" className="placeholder:text-gray-500" />
                  </div>
                </div>
              </div>
            </div>

            <div className="mt-4">
              <div className="space-y-2">
                <Label htmlFor="utilities">Utilities</Label>
                <Input id="utilities" name="utilities" value={jobDetails.utilities || ''} onChange={handleChange} placeholder="e.g., All public utilities available" className="placeholder:text-gray-500" />
              </div>
            </div>
          </div>

          {/* Parcels Summary Section */}
          <div>
            <h4 className="text-lg font-medium mb-4 border-b pb-2 text-slate-700 dark:text-slate-300">Parcels Summary</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div className="grid grid-cols-1 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="parcelNumber">Parcel Number</Label>
                    <Input id="parcelNumber" name="parcelNumber" value={jobDetails.parcelNumber || ''} onChange={handleChange} placeholder="e.g., 123-456-789" className="placeholder:text-gray-500" />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="usableLandSf">Usable Land (SF)</Label>
                    <Input id="usableLandSf" name="usableLandSf" type="number" value={jobDetails.usableLandSf || ''} onChange={handleChange} placeholder="e.g., 15000" className="placeholder:text-gray-500" />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="grossLandSf">Gross Land (SF)</Label>
                    <Input id="grossLandSf" name="grossLandSf" type="number" value={jobDetails.grossLandSf || ''} onChange={handleChange} placeholder="e.g., 18500" className="placeholder:text-gray-500" />
                  </div>
                </div>
              </div>

              <div className="space-y-4">
                <div className="grid grid-cols-1 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="usableLandAcres">Usable Land (Acres)</Label>
                    <Input id="usableLandAcres" name="usableLandAcres" type="number" step="0.01" value={jobDetails.usableLandAcres || ''} onChange={handleChange} placeholder="e.g., 0.34" className="placeholder:text-gray-500" />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="grossLandAcres">Gross Land (Acres)</Label>
                    <Input id="grossLandAcres" name="grossLandAcres" type="number" step="0.01" value={jobDetails.grossLandAcres || ''} onChange={handleChange} placeholder="e.g., 0.42" className="placeholder:text-gray-500" />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="assessedValue">Assessed Value</Label>
                    <Input id="assessedValue" name="assessedValue" type="number" value={jobDetails.assessedValue || ''} onChange={handleChange} placeholder="e.g., 850000" className="placeholder:text-gray-500" />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="taxes">Taxes</Label>
                    <Input id="taxes" name="taxes" type="number" value={jobDetails.taxes || ''} onChange={handleChange} placeholder="e.g., 12500" className="placeholder:text-gray-500" />
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Assessments & Taxes Section */}
          <div>
            <h4 className="text-lg font-medium mb-4 border-b pb-2 text-slate-700 dark:text-slate-300">Assessments & Taxes</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div className="grid grid-cols-1 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="assessmentYear">Assessment Year</Label>
                    <Input id="assessmentYear" name="assessmentYear" value={jobDetails.assessmentYear || ''} onChange={handleChange} placeholder="e.g., 2024" className="placeholder:text-gray-500" />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="landAssessmentValue">Land Assessment Value</Label>
                    <Input id="landAssessmentValue" name="landAssessmentValue" type="number" value={jobDetails.landAssessmentValue || ''} onChange={handleChange} placeholder="e.g., 250000" className="placeholder:text-gray-500" />
                  </div>
                  
                  {/* Assessment Split Data - moved from Section 4 */}
                  <div className="space-y-2">
                    <Label htmlFor="assessment_split_land_value" className="flex items-center gap-2">
                      Assessment Split - Land Value
                      <span className="text-red-500">*</span>
                    </Label>
                    <Input 
                      id="assessment_split_land_value" 
                      name="assessment_split_land_value" 
                      type="number" 
                      value={jobDetails.assessment_split_land_value || ''} 
                      onChange={handleChange} 
                      placeholder="e.g., 250000" 
                      className="placeholder:text-gray-500" 
                    />
                  </div>
                </div>
              </div>

              <div className="space-y-4">
                <div className="grid grid-cols-1 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="improvedAssessmentValue">Improved Assessment Value</Label>
                    <Input id="improvedAssessmentValue" name="improvedAssessmentValue" type="number" value={jobDetails.improvedAssessmentValue || ''} onChange={handleChange} placeholder="e.g., 600000" className="placeholder:text-gray-500" />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="totalAssessmentValue">Total Assessment Value</Label>
                    <Input id="totalAssessmentValue" name="totalAssessmentValue" type="number" value={jobDetails.totalAssessmentValue || ''} onChange={handleChange} placeholder="e.g., 850000" className="placeholder:text-gray-500" />
                  </div>
                  
                  {/* Assessment Split Data - moved from Section 4 */}
                  <div className="space-y-2">
                    <Label htmlFor="assessment_split_building_value" className="flex items-center gap-2">
                      Assessment Split - Building Value
                      <span className="text-red-500">*</span>
                    </Label>
                    <Input 
                      id="assessment_split_building_value" 
                      name="assessment_split_building_value" 
                      type="number" 
                      value={jobDetails.assessment_split_building_value || ''} 
                      onChange={handleChange} 
                      placeholder="e.g., 750000" 
                      className="placeholder:text-gray-500" 
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        </div>
      </AccordionContent>
    </AccordionItem>;
};
export default PropertyInfoSection;